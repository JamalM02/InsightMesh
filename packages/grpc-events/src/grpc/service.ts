// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.1
// source: service.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";
import { Struct } from "./google/protobuf/struct";

export const protobufPackage = "events";

export interface Empty {
}

export interface CreateEventResponse {
  id: string;
  appId: string;
  type: string;
  data: { [key: string]: any } | undefined;
}

export interface CreateEventRequest {
  appId: string;
  type: string;
  data: { [key: string]: any } | undefined;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty = {
  encode(_: Empty, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Empty {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Empty>): Empty {
    return Empty.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Empty>): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseCreateEventResponse(): CreateEventResponse {
  return { id: "", appId: "", type: "", data: undefined };
}

export const CreateEventResponse = {
  encode(message: CreateEventResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.appId !== "") {
      writer.uint32(18).string(message.appId);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.data !== undefined) {
      Struct.encode(Struct.wrap(message.data), writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEventResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      data: isObject(object.data) ? object.data : undefined,
    };
  },

  toJSON(message: CreateEventResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.data !== undefined) {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventResponse>): CreateEventResponse {
    return CreateEventResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventResponse>): CreateEventResponse {
    const message = createBaseCreateEventResponse();
    message.id = object.id ?? "";
    message.appId = object.appId ?? "";
    message.type = object.type ?? "";
    message.data = object.data ?? undefined;
    return message;
  },
};

function createBaseCreateEventRequest(): CreateEventRequest {
  return { appId: "", type: "", data: undefined };
}

export const CreateEventRequest = {
  encode(message: CreateEventRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.appId !== "") {
      writer.uint32(10).string(message.appId);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.data !== undefined) {
      Struct.encode(Struct.wrap(message.data), writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateEventRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.appId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventRequest {
    return {
      appId: isSet(object.appId) ? globalThis.String(object.appId) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      data: isObject(object.data) ? object.data : undefined,
    };
  },

  toJSON(message: CreateEventRequest): unknown {
    const obj: any = {};
    if (message.appId !== "") {
      obj.appId = message.appId;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.data !== undefined) {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventRequest>): CreateEventRequest {
    return CreateEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventRequest>): CreateEventRequest {
    const message = createBaseCreateEventRequest();
    message.appId = object.appId ?? "";
    message.type = object.type ?? "";
    message.data = object.data ?? undefined;
    return message;
  },
};

export type EventsServiceDefinition = typeof EventsServiceDefinition;
export const EventsServiceDefinition = {
  name: "EventsService",
  fullName: "events.EventsService",
  methods: {
    createEvent: {
      name: "CreateEvent",
      requestType: CreateEventRequest,
      requestStream: false,
      responseType: CreateEventResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface EventsServiceImplementation<CallContextExt = {}> {
  createEvent(
    request: CreateEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateEventResponse>>;
}

export interface EventsServiceClient<CallOptionsExt = {}> {
  createEvent(
    request: DeepPartial<CreateEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateEventResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
